/* tslint:disable */
/* eslint-disable */
/**
 * This file was automatically generated by Payload.
 * DO NOT MODIFY IT BY HAND. Instead, modify your source Payload config,
 * and re-run `payload generate:types` to regenerate this file.
 */

/**
 * Supported timezones in IANA format.
 *
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "supportedTimezones".
 */
export type SupportedTimezones =
  | 'Pacific/Midway'
  | 'Pacific/Niue'
  | 'Pacific/Honolulu'
  | 'Pacific/Rarotonga'
  | 'America/Anchorage'
  | 'Pacific/Gambier'
  | 'America/Los_Angeles'
  | 'America/Tijuana'
  | 'America/Denver'
  | 'America/Phoenix'
  | 'America/Chicago'
  | 'America/Guatemala'
  | 'America/New_York'
  | 'America/Bogota'
  | 'America/Caracas'
  | 'America/Santiago'
  | 'America/Buenos_Aires'
  | 'America/Sao_Paulo'
  | 'Atlantic/South_Georgia'
  | 'Atlantic/Azores'
  | 'Atlantic/Cape_Verde'
  | 'Europe/London'
  | 'Europe/Berlin'
  | 'Africa/Lagos'
  | 'Europe/Athens'
  | 'Africa/Cairo'
  | 'Europe/Moscow'
  | 'Asia/Riyadh'
  | 'Asia/Dubai'
  | 'Asia/Baku'
  | 'Asia/Karachi'
  | 'Asia/Tashkent'
  | 'Asia/Calcutta'
  | 'Asia/Dhaka'
  | 'Asia/Almaty'
  | 'Asia/Jakarta'
  | 'Asia/Bangkok'
  | 'Asia/Shanghai'
  | 'Asia/Singapore'
  | 'Asia/Tokyo'
  | 'Asia/Seoul'
  | 'Australia/Brisbane'
  | 'Australia/Sydney'
  | 'Pacific/Guam'
  | 'Pacific/Noumea'
  | 'Pacific/Auckland'
  | 'Pacific/Fiji';

export interface Config {
  auth: {
    users: UserAuthOperations;
  };
  blocks: {};
  collections: {
    pages: Page;
    users: User;
    media: Media;
    forms: Form;
    'form-submissions': FormSubmission;
    'payload-locked-documents': PayloadLockedDocument;
    'payload-preferences': PayloadPreference;
    'payload-migrations': PayloadMigration;
  };
  collectionsJoins: {};
  collectionsSelect: {
    pages: PagesSelect<false> | PagesSelect<true>;
    users: UsersSelect<false> | UsersSelect<true>;
    media: MediaSelect<false> | MediaSelect<true>;
    forms: FormsSelect<false> | FormsSelect<true>;
    'form-submissions': FormSubmissionsSelect<false> | FormSubmissionsSelect<true>;
    'payload-locked-documents': PayloadLockedDocumentsSelect<false> | PayloadLockedDocumentsSelect<true>;
    'payload-preferences': PayloadPreferencesSelect<false> | PayloadPreferencesSelect<true>;
    'payload-migrations': PayloadMigrationsSelect<false> | PayloadMigrationsSelect<true>;
  };
  db: {
    defaultIDType: string;
  };
  globals: {};
  globalsSelect: {};
  locale: null;
  user: User & {
    collection: 'users';
  };
  jobs: {
    tasks: unknown;
    workflows: unknown;
  };
}
export interface UserAuthOperations {
  forgotPassword: {
    email: string;
    password: string;
  };
  login: {
    email: string;
    password: string;
  };
  registerFirstUser: {
    email: string;
    password: string;
  };
  unlock: {
    email: string;
    password: string;
  };
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "pages".
 */
export interface Page {
  id: string;
  title: string;
  layout: FormBlock[];
  slug?: string | null;
  updatedAt: string;
  createdAt: string;
  _status?: ('draft' | 'published') | null;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "FormBlock".
 */
export interface FormBlock {
  form: string | Form;
  enableIntro?: boolean | null;
  introContent?: {
    root: {
      type: string;
      children: {
        type: string;
        version: number;
        [k: string]: unknown;
      }[];
      direction: ('ltr' | 'rtl') | null;
      format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
      indent: number;
      version: number;
    };
    [k: string]: unknown;
  } | null;
  id?: string | null;
  blockName?: string | null;
  blockType: 'formBlock';
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "forms".
 */
export interface Form {
  id: string;
  title: string;
  formType: 'dynamic' | 'static';
  fields?:
    | (
        | CheckboxFormField
        | CountryFormField
        | EmailFormField
        | {
            message?: {
              root: {
                type: string;
                children: {
                  type: string;
                  version: number;
                  [k: string]: unknown;
                }[];
                direction: ('ltr' | 'rtl') | null;
                format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
                indent: number;
                version: number;
              };
              [k: string]: unknown;
            } | null;
            id?: string | null;
            blockName?: string | null;
            blockType: 'message';
          }
        | NumberFormField
        | SelectFormField
        | StateFormField
        | TextFormField
        | TextareaFormField
        | PhoneFormField
        | ArrayFormField
        | GroupFormField
      )[]
    | null;
  form?: 'login' | null;
  submitButtonLabel?: string | null;
  /**
   * Choose whether to display an on-page message or redirect to a different page after they submit the form.
   */
  confirmationType?: ('message' | 'redirect') | null;
  confirmationMessage?: {
    root: {
      type: string;
      children: {
        type: string;
        version: number;
        [k: string]: unknown;
      }[];
      direction: ('ltr' | 'rtl') | null;
      format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
      indent: number;
      version: number;
    };
    [k: string]: unknown;
  } | null;
  redirect?: {
    type?: ('reference' | 'custom') | null;
    reference?: {
      relationTo: 'pages';
      value: string | Page;
    } | null;
    url?: string | null;
  };
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "CheckboxFormField".
 */
export interface CheckboxFormField {
  name: string;
  label?: string | null;
  colSpan: '1' | '2';
  errorMsg?: string | null;
  defaultValue?: boolean | null;
  required?: boolean | null;
  id?: string | null;
  blockName?: string | null;
  blockType: 'checkbox';
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "CountryFormField".
 */
export interface CountryFormField {
  name: string;
  label?: string | null;
  /**
   * form defaults to spanning the full two columns
   */
  colSpan: '1' | '2';
  required?: boolean | null;
  id?: string | null;
  blockName?: string | null;
  blockType: 'country';
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "EmailFormField".
 */
export interface EmailFormField {
  name: string;
  label?: string | null;
  /**
   * form defaults to spanning the full two columns
   */
  colSpan: '1' | '2';
  required?: boolean | null;
  id?: string | null;
  blockName?: string | null;
  blockType: 'email';
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "NumberFormField".
 */
export interface NumberFormField {
  name: string;
  label?: string | null;
  colSpan: '1' | '2';
  defaultValue?: number | null;
  min?: number | null;
  minError?: string | null;
  max?: number | null;
  maxError?: string | null;
  required?: boolean | null;
  id?: string | null;
  blockName?: string | null;
  blockType: 'number';
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "SelectFormField".
 */
export interface SelectFormField {
  name: string;
  label?: string | null;
  colSpan: '1' | '2';
  defaultValue?: string | null;
  options?:
    | {
        label: string;
        value: string;
        id?: string | null;
      }[]
    | null;
  required?: boolean | null;
  id?: string | null;
  blockName?: string | null;
  blockType: 'select';
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "StateFormField".
 */
export interface StateFormField {
  name: string;
  label?: string | null;
  /**
   * form defaults to spanning the full two columns
   */
  colSpan: '1' | '2';
  required?: boolean | null;
  id?: string | null;
  blockName?: string | null;
  blockType: 'state';
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "TextFormField".
 */
export interface TextFormField {
  name: string;
  label?: string | null;
  colSpan: '1' | '2';
  defaultValue?: string | null;
  required?: boolean | null;
  id?: string | null;
  blockName?: string | null;
  blockType: 'text';
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "TextareaFormField".
 */
export interface TextareaFormField {
  name: string;
  label?: string | null;
  colSpan: '1' | '2';
  defaultValue?: string | null;
  required?: boolean | null;
  id?: string | null;
  blockName?: string | null;
  blockType: 'textarea';
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "PhoneFormField".
 */
export interface PhoneFormField {
  name: string;
  label?: string | null;
  /**
   * form defaults to spanning the full two columns
   */
  colSpan: '1' | '2';
  required?: boolean | null;
  id?: string | null;
  blockName?: string | null;
  blockType: 'phone';
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "ArrayFormField".
 */
export interface ArrayFormField {
  name: string;
  label: string;
  title?: string | null;
  description?: string | null;
  colSpan: '1' | '2';
  minRows: number;
  maxRows: number;
  fields: (TextFormField | TextareaFormField | EmailFormField | NumberFormField | CheckboxFormField | PhoneFormField)[];
  id?: string | null;
  blockName?: string | null;
  blockType: 'array';
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "GroupFormField".
 */
export interface GroupFormField {
  name: string;
  title?: string | null;
  description?: string | null;
  fields: (
    | TextFormField
    | TextareaFormField
    | EmailFormField
    | NumberFormField
    | CheckboxFormField
    | PhoneFormField
    | ArrayFormField
    | SelectFormField
    | StateFormField
    | CountryFormField
  )[];
  id?: string | null;
  blockName?: string | null;
  blockType: 'group';
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "users".
 */
export interface User {
  id: string;
  updatedAt: string;
  createdAt: string;
  email: string;
  resetPasswordToken?: string | null;
  resetPasswordExpiration?: string | null;
  salt?: string | null;
  hash?: string | null;
  loginAttempts?: number | null;
  lockUntil?: string | null;
  password?: string | null;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "media".
 */
export interface Media {
  id: string;
  alt: string;
  updatedAt: string;
  createdAt: string;
  url?: string | null;
  thumbnailURL?: string | null;
  filename?: string | null;
  mimeType?: string | null;
  filesize?: number | null;
  width?: number | null;
  height?: number | null;
  focalX?: number | null;
  focalY?: number | null;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "form-submissions".
 */
export interface FormSubmission {
  id: string;
  form: string | Form;
  data:
    | {
        [k: string]: unknown;
      }
    | unknown[]
    | string
    | number
    | boolean
    | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-locked-documents".
 */
export interface PayloadLockedDocument {
  id: string;
  document?:
    | ({
        relationTo: 'pages';
        value: string | Page;
      } | null)
    | ({
        relationTo: 'users';
        value: string | User;
      } | null)
    | ({
        relationTo: 'media';
        value: string | Media;
      } | null)
    | ({
        relationTo: 'forms';
        value: string | Form;
      } | null)
    | ({
        relationTo: 'form-submissions';
        value: string | FormSubmission;
      } | null);
  globalSlug?: string | null;
  user: {
    relationTo: 'users';
    value: string | User;
  };
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-preferences".
 */
export interface PayloadPreference {
  id: string;
  user: {
    relationTo: 'users';
    value: string | User;
  };
  key?: string | null;
  value?:
    | {
        [k: string]: unknown;
      }
    | unknown[]
    | string
    | number
    | boolean
    | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-migrations".
 */
export interface PayloadMigration {
  id: string;
  name?: string | null;
  batch?: number | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "pages_select".
 */
export interface PagesSelect<T extends boolean = true> {
  title?: T;
  layout?:
    | T
    | {
        formBlock?: T | FormBlockSelect<T>;
      };
  slug?: T;
  updatedAt?: T;
  createdAt?: T;
  _status?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "FormBlock_select".
 */
export interface FormBlockSelect<T extends boolean = true> {
  form?: T;
  enableIntro?: T;
  introContent?: T;
  id?: T;
  blockName?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "users_select".
 */
export interface UsersSelect<T extends boolean = true> {
  updatedAt?: T;
  createdAt?: T;
  email?: T;
  resetPasswordToken?: T;
  resetPasswordExpiration?: T;
  salt?: T;
  hash?: T;
  loginAttempts?: T;
  lockUntil?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "media_select".
 */
export interface MediaSelect<T extends boolean = true> {
  alt?: T;
  updatedAt?: T;
  createdAt?: T;
  url?: T;
  thumbnailURL?: T;
  filename?: T;
  mimeType?: T;
  filesize?: T;
  width?: T;
  height?: T;
  focalX?: T;
  focalY?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "forms_select".
 */
export interface FormsSelect<T extends boolean = true> {
  title?: T;
  formType?: T;
  fields?:
    | T
    | {
        checkbox?: T | CheckboxFormFieldSelect<T>;
        country?: T | CountryFormFieldSelect<T>;
        email?: T | EmailFormFieldSelect<T>;
        message?:
          | T
          | {
              message?: T;
              id?: T;
              blockName?: T;
            };
        number?: T | NumberFormFieldSelect<T>;
        select?: T | SelectFormFieldSelect<T>;
        state?: T | StateFormFieldSelect<T>;
        text?: T | TextFormFieldSelect<T>;
        textarea?: T | TextareaFormFieldSelect<T>;
        phone?: T | PhoneFormFieldSelect<T>;
        array?: T | ArrayFormFieldSelect<T>;
        group?: T | GroupFormFieldSelect<T>;
      };
  form?: T;
  submitButtonLabel?: T;
  confirmationType?: T;
  confirmationMessage?: T;
  redirect?:
    | T
    | {
        type?: T;
        reference?: T;
        url?: T;
      };
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "CheckboxFormField_select".
 */
export interface CheckboxFormFieldSelect<T extends boolean = true> {
  name?: T;
  label?: T;
  colSpan?: T;
  errorMsg?: T;
  defaultValue?: T;
  required?: T;
  id?: T;
  blockName?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "CountryFormField_select".
 */
export interface CountryFormFieldSelect<T extends boolean = true> {
  name?: T;
  label?: T;
  colSpan?: T;
  required?: T;
  id?: T;
  blockName?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "EmailFormField_select".
 */
export interface EmailFormFieldSelect<T extends boolean = true> {
  name?: T;
  label?: T;
  colSpan?: T;
  required?: T;
  id?: T;
  blockName?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "NumberFormField_select".
 */
export interface NumberFormFieldSelect<T extends boolean = true> {
  name?: T;
  label?: T;
  colSpan?: T;
  defaultValue?: T;
  min?: T;
  minError?: T;
  max?: T;
  maxError?: T;
  required?: T;
  id?: T;
  blockName?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "SelectFormField_select".
 */
export interface SelectFormFieldSelect<T extends boolean = true> {
  name?: T;
  label?: T;
  colSpan?: T;
  defaultValue?: T;
  options?:
    | T
    | {
        label?: T;
        value?: T;
        id?: T;
      };
  required?: T;
  id?: T;
  blockName?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "StateFormField_select".
 */
export interface StateFormFieldSelect<T extends boolean = true> {
  name?: T;
  label?: T;
  colSpan?: T;
  required?: T;
  id?: T;
  blockName?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "TextFormField_select".
 */
export interface TextFormFieldSelect<T extends boolean = true> {
  name?: T;
  label?: T;
  colSpan?: T;
  defaultValue?: T;
  required?: T;
  id?: T;
  blockName?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "TextareaFormField_select".
 */
export interface TextareaFormFieldSelect<T extends boolean = true> {
  name?: T;
  label?: T;
  colSpan?: T;
  defaultValue?: T;
  required?: T;
  id?: T;
  blockName?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "PhoneFormField_select".
 */
export interface PhoneFormFieldSelect<T extends boolean = true> {
  name?: T;
  label?: T;
  colSpan?: T;
  required?: T;
  id?: T;
  blockName?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "ArrayFormField_select".
 */
export interface ArrayFormFieldSelect<T extends boolean = true> {
  name?: T;
  label?: T;
  title?: T;
  description?: T;
  colSpan?: T;
  minRows?: T;
  maxRows?: T;
  fields?:
    | T
    | {
        text?: T | TextFormFieldSelect<T>;
        textarea?: T | TextareaFormFieldSelect<T>;
        email?: T | EmailFormFieldSelect<T>;
        number?: T | NumberFormFieldSelect<T>;
        checkbox?: T | CheckboxFormFieldSelect<T>;
        phone?: T | PhoneFormFieldSelect<T>;
      };
  id?: T;
  blockName?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "GroupFormField_select".
 */
export interface GroupFormFieldSelect<T extends boolean = true> {
  name?: T;
  title?: T;
  description?: T;
  fields?:
    | T
    | {
        text?: T | TextFormFieldSelect<T>;
        textarea?: T | TextareaFormFieldSelect<T>;
        email?: T | EmailFormFieldSelect<T>;
        number?: T | NumberFormFieldSelect<T>;
        checkbox?: T | CheckboxFormFieldSelect<T>;
        phone?: T | PhoneFormFieldSelect<T>;
        array?: T | ArrayFormFieldSelect<T>;
        select?: T | SelectFormFieldSelect<T>;
        state?: T | StateFormFieldSelect<T>;
        country?: T | CountryFormFieldSelect<T>;
      };
  id?: T;
  blockName?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "form-submissions_select".
 */
export interface FormSubmissionsSelect<T extends boolean = true> {
  form?: T;
  data?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-locked-documents_select".
 */
export interface PayloadLockedDocumentsSelect<T extends boolean = true> {
  document?: T;
  globalSlug?: T;
  user?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-preferences_select".
 */
export interface PayloadPreferencesSelect<T extends boolean = true> {
  user?: T;
  key?: T;
  value?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-migrations_select".
 */
export interface PayloadMigrationsSelect<T extends boolean = true> {
  name?: T;
  batch?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "auth".
 */
export interface Auth {
  [k: string]: unknown;
}


declare module 'payload' {
  export interface GeneratedTypes extends Config {}
}